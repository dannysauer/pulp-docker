diff --git a/pulpcore/app/settings.py b/pulpcore/app/settings.py
index 8a544803a..45c1ea547 100644
--- a/pulpcore/app/settings.py
+++ b/pulpcore/app/settings.py
@@ -56,6 +56,12 @@ FILE_UPLOAD_HANDLERS = ("pulpcore.app.files.HashingFileUploadHandler",)
 
 SECRET_KEY = True
 
+# regex to alter path in content-disposition header & str to replace them with
+# wrapped in parens to prevent dynaconf from thinking this is a list :/
+#S3_REPO_MANGLE_REGEX = r'([^-a-zA-Z0-9._])'
+S3_REPO_MANGLE_REGEX = r'([/=;])'
+S3_REPO_MANGLE_TO = '__'
+
 # Application definition
 
 INSTALLED_APPS = [
diff --git a/pulpcore/content/handler.py b/pulpcore/content/handler.py
index 03631328b..e3f8f865c 100644
--- a/pulpcore/content/handler.py
+++ b/pulpcore/content/handler.py
@@ -523,7 +523,7 @@ class Handler:
                 pass
             else:
                 if ca.artifact:
-                    return await self._serve_content_artifact(ca, headers)
+                    return await self._serve_content_artifact(ca, headers, path)
                 else:
                     return await self._stream_content_artifact(
                         request, StreamResponse(headers=headers), ca
@@ -551,7 +551,7 @@ class Handler:
                     pass
                 else:
                     if ca.artifact:
-                        return await self._serve_content_artifact(ca, headers)
+                        return await self._serve_content_artifact(ca, headers, path)
                     else:
                         return await self._stream_content_artifact(
                             request, StreamResponse(headers=headers), ca
@@ -597,7 +597,7 @@ class Handler:
                 pass
             else:
                 if ca.artifact:
-                    return await self._serve_content_artifact(ca, headers)
+                    return await self._serve_content_artifact(ca, headers, path)
                 else:
                     return await self._stream_content_artifact(
                         request, StreamResponse(headers=headers), ca
@@ -624,7 +624,7 @@ class Handler:
                 ra = await loop.run_in_executor(None, get_remote_artifact_blocking)
                 ca = ra.content_artifact
                 if ca.artifact:
-                    return await self._serve_content_artifact(ca, headers)
+                    return await self._serve_content_artifact(ca, headers, path)
                 else:
                     return await self._stream_content_artifact(
                         request, StreamResponse(headers=headers), ca
@@ -761,7 +761,7 @@ class Handler:
                 content_artifact.save()
         return artifact
 
-    async def _serve_content_artifact(self, content_artifact, headers):
+    async def _serve_content_artifact(self, content_artifact, headers, path=''):
         """
         Handle response for a Content Artifact with the file present.
 
@@ -786,7 +786,11 @@ class Handler:
         if settings.DEFAULT_FILE_STORAGE == "pulpcore.app.models.storage.FileSystem":
             return FileResponse(os.path.join(settings.MEDIA_ROOT, artifact_name), headers=headers)
         elif settings.DEFAULT_FILE_STORAGE == "storages.backends.s3boto3.S3Boto3Storage":
-            content_disposition = f"attachment;filename={content_artifact.relative_path}"
+            artifact_file = content_artifact.artifact.file
+            mangled_repo_path = re.sub(
+                settings.S3_REPO_MANGLE_REGEX, settings.S3_REPO_MANGLE_TO, path)
+            artifact_name = os.path.basename(content_artifact.relative_path)
+            content_disposition = f'attachment;x-pulp-artifact-path={mangled_repo_path};filename={artifact_name}'
             parameters = {"ResponseContentDisposition": content_disposition}
             url = URL(
                 artifact_file.storage.url(artifact_file.name, parameters=parameters), encoded=True
